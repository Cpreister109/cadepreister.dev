NASA APOD Web App | JavaScript/React/HTML/CSS@https://github.com/Cpreister109/NASA-React.git@This is a web application that utilizes JavaScript & React. It pulls data from the daily picture API from NASA, where it then caches that data and relays it to the user through the web page. This prevents wasteful API calls that could exceed the 1000 calls per hour limit.
Expense Epicenter | C#/ASP.NET/HTML/CSS@https://github.com/Cpreister109/Expense-Epicenter.git@An ASP.NET web application made with C# that tracks user expenses, storing them in an SQL database. This allows for it to retain its memory even after the application has been rebuilt. When the site is loaded, all previously stored data in the database is relayed to the user, including their expenses total.
Currency Converter | Python@https://github.com/Cpreister109/Final-Project-Currency-Converter@In Python, I utilized an API to retrieve exchange rates in real time and performed the necessary calculations to convert designated currencies. This is done through a Tkinter GUI controlled by the user.
Platform Game | C#@https://github.com/Cpreister109/Platformer-Game@This project was constructed using the Godot game engine, an open-source resource with C# capabilities. I created a platformer game by learning the basics of the engine and integrating my own C# scripts to interact with different components.
Discord Bot | Python@https://github.com/Cpreister109/MontanaState_Bot@The purpose of this project is to optimize and improve processes within a Discord server. This bot was constructed for a server of over 1200 people. The program uses the discord.py extension to allow the bot to execute different commands and/or send messages.
Bank Account Management | Python@https://github.com/Cpreister109/Final-Project-Bank-Account@Using a Tkinter GUI, I created an application that allows users to sign into their bank account. Depending on their input, users can create an account or choose to deposit or withdraw from their account. All data is saved to a CSV file, maintaining a record of past events between runs.
cadepreister.dev | Python/HTML/CSS@https://github.com/Cpreister109/cadepreister.dev@This project is the website you are currently visiting. I built this site using the Flask extension in Python. By leveraging the functions provided by this extension, I created a website with multiple pages and templates. After construction, I connected the files to a gunicorn web server ran through an AWS instance, the server was then linked to a domain name I purchased online.
nlcareerconsulting.net | Python/HTML/CSS@https://github.com/Cpreister109/nlcareerconsulting.net@Similar to the website you're visiting right now, this project will soon be a fully launched Flask application. It will be used to connect a multitude of users to a small business located in Omaha.
Wizard RPG | C#@https://github.com/Cpreister109/Wizard-Project@With the help of .NET Core, I constructed a console application that uses object-oriented programming within the C# language to create an interactive fantasy setting. Users can cast spells, rest, and level up. This project was a valuable stepping stone in learning how .NET and C# work together.
JSCalc | JavaScript/HTML/CSS@https://github.com/Cpreister109/JSCalc.git@This is a simple JavaScript calculator I created to practice interactions between JavaScript and HTML/CSS.
Maui App | C#/XAML@https://github.com/Cpreister109/FirstApp@This is the start of a cross-platform app that I hope to improve upon soon. By using Visual Studio and the .NET MAUI extension, it is possible to develop and deploy apps across iOS, Mac, and Android platforms. I used the Android Studio emulator and Xcode for development.
Task List | Python/HTML/CSS (In Unix, Not on Github)@/@When the code in this project is executed, it creates a Flask app that can process forms from the user using "GET" and "POST" methods. It stores task information, including due date, creation date, and description, in a CSV file. Tasks are displayed as completed, overdue, or incomplete, and users can delete or complete tasks.
Blog Site | Python/HTML/CSS (In Unix, Not on Github)@/@This project also uses the Flask extension. It is a basic webpage with multiple tabs, displaying uploaded blogs along with an about and home page.
URL Shortener | Python/HTML/CSS (In Unix, Not on Github)@/@Using routes in the routes.py file, I connected a random URL to an original webpage URL and allowed users to create shortened URLs. These URLs are then displayed in a separate tab.
Web Scaper | Python (In Unix, Not on Github)@/@This program scrapes HTML code from a box office website to find the best-selling movies of the last month. It uses the Beautiful Soup extension in Python to pull specific HTML elements, and the regular expressions module to extract the needed information. The collected info is then summarized.
Best Selling Videogame Graph | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Best-Selling%20Videogames%20Graph.py@In this project, I used the "matplotlib.pyplot" extension in Python to create graphs.
Conway's Game of Life | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Conway's%20Game%20of%20Life.py@This project uses the "matplotlib.pyplot" and "matplotlib.animation" extensions to update the results of each pass through the grid according to the rules of Conway's Game of Life.
Tic Tac Toe | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Tic%20Tac%20Toe.py@The Tic Tac Toe project was created using the Turtle module in Python. This module simplifies tracking user input through the mouse, allowing for a GUI Tic Tac Toe board where users can play with a friend.
Wordle | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Wordle.py@I created this game using Python's indexing features. By selecting from a set word bank, I chose a random word for each turn. The game follows the same rules as the popular New York Times Wordle.
Television System | Python@https://github.com/Cpreister109/python@This program uses object-oriented programming to simulate the functions of a TV remote. It can turn the TV on and off, change the volume, and switch channels. The channel and volume settings are saved even when the program is off, and there is also a mute feature that saves the current volume level.